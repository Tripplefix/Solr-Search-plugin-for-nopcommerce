<!-- This content item needs to be implemented in the themes folder -->
@model ProductSolrResultModel

@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Search").Text);
    //page class
    Html.AppendPageCssClassParts("html-search-page");
}
<div class="section">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="row">
                    <div class="col-12 col-lg-6 offset-lg-3">
                        <form asp-route="ProductSearch" method="get">
                            <div class="fieldset">
                                <div class="form-fields">
                                    <div class="inputs inputs-group">
                                        <label asp-for="q"></label>
                                        <input asp-for="q" />
                                        <div class="inputs-group__button">
                                            <button class="button-1" type="button">
                                                @T("Search.Button")
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="section section--no-padding text-center">
    @if (!string.IsNullOrWhiteSpace(Model.q))
    {
        <div class="section--title">
            <h2>@T("VIU.Plugin.SolrSearch.ResultPage.ResultsFor", Model.q)</h2>
        </div>
        <div class="text--center">
            <div class="h4">@T("VIU.Plugin.SolrSearch.ResultPage.ProductsWithCount", Model.Products.Count())</div>
        </div>
    }
    @await Component.InvokeAsync("Widget", new
    {
        widgetZone = PublicWidgetZones.ProductSearchPageBeforeResults
    })

</div>

<div class="section">
    <div class="search-results">
        @if (!string.IsNullOrEmpty(Model.Warning))
        {
            <div class="warning">
                @Model.Warning
            </div>
        }
        else
        {
            if (Model.NoResults)
            {
                <div class="no-result">
                    @T("Search.NoResultsText")
                </div>
            }

            if (Model.Products.Any())
            {
                var rnd = new Random();
                var id = rnd.Next(1000, 9999).ToString();

                <div class="product-grid" id="@id">
                    <div class="item-grid">
                        <div class="item-row">
                            @foreach (var product in Model.Products.Take(4))
                            {
                                <div class="item-box">
                                    @await Html.PartialAsync("_ProductBox", product)
                                </div>
                            }
                            @foreach (var product in Model.Products.Skip(4))
                            {
                                <div class="item-box">
                                    @await Html.PartialAsync("_ProductBox", product, new ViewDataDictionary(ViewData) { { "HideProduct", true } })
                                </div>
                            }
                        </div>

                        @if (Model.Products.Count() > 4)
                        {
                            <div class="item-grid__button">
                                <div class="item-grid__button-container">
                                    <button type="button" class="button-2" onclick="$('#@id .product__hide-on-desktop').slideDown(); $('#@id .item-grid__button').slideUp(); return false;">
                                        @T("IVF.Plugin.Kontent.Presentation.ProductTeaser.ShowAll")
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>

    @await Component.InvokeAsync("Widget", new
    {
        widgetZone = PublicWidgetZones.ProductSearchPageAfterResults
    })
</div>