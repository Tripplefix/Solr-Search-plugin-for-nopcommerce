@model ProductSolrResultModel
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(T("PageTitle.Search").Text);
    //page class
    Html.AppendPageCssClassParts("html-search-page");
    
    Html.AppendScriptParts(ResourceLocation.Footer, "~/Plugins/VIU.Plugin.SolrSearch/Content/JavaScripts/bootstrap-select.min.js");        
    Html.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/bootstrap/js/bootstrap.bundle.min.js");
    
    Html.AddCssFileParts("~/Plugins/VIU.Plugin.SolrSearch/Content/CSS/bootstrap-select.min.css");    
    Html.AddCssFileParts("~/lib_npm/bootstrap/css/bootstrap.min.css");

    Html.AddScriptParts(ResourceLocation.Footer, "~/js/public.catalogproducts.js");
    Html.AppendScriptParts(ResourceLocation.Footer, $"~/Plugins/VIU.Plugin.SolrSearch/Content/JavaScripts/solr-prices-async.js");
}

@* todo: clean up js code! *@
<script asp-location="Footer">
    CatalogProducts.init({
        ajax: true,
        browserPath: '@Context.Request.Path',
        fetchUrl: '@Html.Raw(Url.Action("SearchProductsUpdate", "SolrSearch"))'
    });
    
    var $facetSelects = $('.search-facet');
            
    $facetSelects.on('changed.bs.select', function () { //hide.bs.select
        CatalogProducts.getProducts();
    });
    
    $(CatalogProducts).on('loaded', function (e) {
        loadPricesForProducts();
    });

    $(CatalogProducts).on('before', function (e) {
        SolrSearch.facets = [];
        
        $facetSelects.each(function() {
            var facetName = $( this ).data('facet-name');
            $( this ).find(':selected').each(function() {
                var optionName = $( this ).val();
                SolrSearch.filter(facetName, optionName);
            });
         });

        e.payload.urlBuilder
            .addParameter('q', '@Uri.EscapeDataString(Model.q)');
        
        var facets = SolrSearch.applyFilter();
        
        if (facets && facets.length > 0){
            e.payload.urlBuilder
                .addParameter('facets', facets);
        }
        updateFilters(facets);
    });

    
    @{
        var q = !string.IsNullOrWhiteSpace(Model.q) ? "?q=" + Uri.EscapeDataString(Model.q) : string.Empty;
    }
    var SolrSearch = {
        loading: false,
        facets: [],
        
        init: function () {
            this.facets = this.loadFacetsFromQuery();
        },
        
        setLoading: function () {
            this.loading = true;  
            
            $('.filter__label .filter').addClass('filter--disabled').prop("disabled",true);
        },
                 
        filter: function (facet, option){
            
            //if (this.loading) return;

            if (Object.keys(this.facets).length > 0){
                
                if (!this.facets[facet]){
                    this.facets[facet] = [];           
                }  
                
                if (!this.facets[facet].includes(option)){
                    this.facets[facet].push(option);   
                }
                    
            }else{
                
                this.facets[facet] = [];       
                this.facets[facet].push(option);
                
            }
        },
        
        resetFilter: function () {
            if (this.loading) return;
            
            this.setLoading();
            
            this.facets = [];
            
            CatalogProducts.getProducts();
        },
        
        loadFacetsFromQuery: function() {
            let facets = {};            
            
            const facetsParam = this.getParameterByName('facets'); 
            
            if (!facetsParam || facetsParam.length <= 0) return facets;
            
            const facetStrings = facetsParam.split(',');
                          
            facetStrings.forEach(function(value) {
                const facetName = value.split(':')[0];
                facets[facetName] = value.split(':')[1].split('|');
            });
            
            return facets;
        },
        
        applyFilter: function() {
            
            this.setLoading();
            
            let query = "";
            
            Object.keys(this.facets).forEach(key => {
                query += key + ":" + this.facets[key].join('|') + ",";
            });
            
            query = query.slice(0, -1);
            
            return query;
        },
        
        getParameterByName: function(name, url = window.location.href) {
            name = name.replace(/[\[\]]/g, '\\$&');
            const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }
    }
    
    SolrSearch.init();
    
    function updateFilters(facets){
        console.log("updates filters..");
       
        $.ajax({
            cache: false,
            data: {
                q: '@Uri.EscapeDataString(Model.q)',
                facets: facets
            },
            url: '@Html.Raw(Url.Action("SearchFiltersUpdate", "SolrSearch"))',
            type: "GET",
            success: function(response){
                $('.facets-wrapper').html(response);
                
                var $facetSelects = $('.search-facet');
                        
                $facetSelects.selectpicker();
                
                $facetSelects.on('changed.bs.select', function () { //hide.bs.select
                    CatalogProducts.getProducts();
                });
                
                $(CatalogProducts).off('before');
                
                $(CatalogProducts).on('before', function (e) {
                    SolrSearch.facets = [];
                    
                    $facetSelects.each(function() {
                        var facetName = $( this ).data('facet-name');
                        $( this ).find(':selected').each(function() {
                            var optionName = $( this ).val();
                            SolrSearch.filter(facetName, optionName);
                        });
                     });
            
                    e.payload.urlBuilder
                        .addParameter('q', '@Uri.EscapeDataString(Model.q)');
                    
                    var facets = SolrSearch.applyFilter();
                    
                    if (facets && facets.length > 0){
                        e.payload.urlBuilder
                            .addParameter('facets', facets);
                    }
                    updateFilters(facets);
                });
            }
        });
                    
    }
</script>

<div class="page search-page">
    <div class="page-title" style="border: none;"> 
        <h1>
            @T("VIU.Plugin.SolrSearch.ResultPage.ResultsFor", Model.q)
            <span class="h5">&nbsp;@T("VIU.Plugin.SolrSearch.ResultPage.ProductsWithCount", Model.Products.Count)</span>
        </h1>
        
    </div>
    <div class="page-body">
        <div class="facets-wrapper">
            @await Html.PartialAsync("_FacetFilter", Model)
        </div>

        @* @await Html.PartialAsync("_CatalogSelectors", Model.CatalogProductsModel) *@
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductSearchPageBeforeResults })
        <div class="search-results">
            <div class="products-container">
                <div class="ajax-products-busy"></div>
                <div class="products-wrapper">
                    @await Html.PartialAsync("_ProductsInGridOrLines", Model)
                </div>
            </div>
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductSearchPageAfterResults })
    </div>
</div>
