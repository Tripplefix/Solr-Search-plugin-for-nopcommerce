@using Nop.Services.Catalog
@using Nop.Services.Configuration
@model ProductSolrResultModel
@inject ICategoryService categoryService
@inject ISettingService settingService

@{
    Layout = "_ColumnsOne";

    //solid header
    ViewData.Add(new KeyValuePair<string, object>("IsSolidHeader", true));

    //title
    Html.AddTitleParts(T("PageTitle.Search").Text);
    //page class
    Html.AppendPageCssClassParts("html-search-page");

    var blogResults = await Component.InvokeAsync("Widget", new { widgetZone = "kontent_search_blog_results", additionalData = Model.q });
    var blogResultsEnabled = !string.IsNullOrEmpty(blogResults.ToString());
    
    const int InitiallyLoadedProducts = 4;
    
    var assortmentCategoryId = 0;
    var setting = await settingService.GetSettingAsync("KontentSettings.AssortmentCategoryId");
    if (setting?.Value != null)
    {
        int.TryParse(setting.Value, out assortmentCategoryId);
    }

    // load prices async
    Html.AppendScriptParts(ResourceLocation.Footer, $"~/Plugins/VIU.Plugin.SolrSearch/Content/JavaScripts/solr-prices-async.js?v3");
}

@functions {

    async Task<string> GetProductBoxType(int productCategoryId, int assortmentCategoryId)
    {
        var assCats = await categoryService.GetChildCategoryIdsAsync(assortmentCategoryId, showHidden: true);

        var productBoxType = "_ProductBox";
        if (assortmentCategoryId != 0)
        {
            var categoryIds = (await categoryService
                .GetProductCategoriesByProductIdAsync(productCategoryId, true))
                .Select(category => category.CategoryId);

            if (categoryIds.Intersect(assCats).Any())
            {
                productBoxType = "_ProductBoxAssortment";
            }
        }
        return productBoxType;
    }
}

<div class="container my-5">
    <div class="row">
        <div class="col-12 col-lg-6 offset-lg-3">
            <form asp-route="ProductSearch" method="get">
                <div class="fieldset">
                    <div class="form-fields">
                        <div class="inputs inputs-group">
                            <label asp-for="q"></label>
                            <input asp-for="q" />
                            <div class="inputs-group__button">
                                <button class="button-1" type="submit">
                                    @T("VIU.Plugin.SolrSearch.ResultPage.SearchButtonText") <span class="icon-ivf icon-magnify"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@await Component.InvokeAsync("Widget", new
{
    widgetZone = PublicWidgetZones.ProductSearchPageBeforeResults
})


<div class="container my-5 pt-5">
    <div class="row">
        <div class="col-12">
            <div class="text-center">
                @if (!string.IsNullOrWhiteSpace(Model.q))
                {
                    <div class="section--title">
                        <h2>@T("VIU.Plugin.SolrSearch.ResultPage.ResultsFor", Model.q)</h2>
                    </div>
                }
                <div class="h4">
                    @T("VIU.Plugin.SolrSearch.ResultPage.ProductsWithCount", Model.Products.Count)
                </div>
            </div>

            @if (!Model.NoResults && Model.Products.Any())
            {
                <div class="search-results my-5">

                    @if (!string.IsNullOrEmpty(Model.Warning))
                    {
                        <div class="warning">
                            @Model.Warning
                        </div>
                    }
                    else
                    {
                        <div class="product-grid" data-prices-async data-prices-async-url="@(Url.Action("PricesJson", "SolrSearch"))">
                            <div class="item-row loadable-list" data-loadable-items-amount="@InitiallyLoadedProducts">
                                @foreach (var product in Model.Products.Take(InitiallyLoadedProducts))
                                {
                                    @await Html.PartialAsync(await GetProductBoxType(product.Id, assortmentCategoryId), product, new ViewDataDictionary(ViewData){ { "LoadableProduct", true } })
                                }
                                @foreach (var product in Model.Products.Skip(InitiallyLoadedProducts))
                                {
                                    @await Html.PartialAsync(await GetProductBoxType(product.Id, assortmentCategoryId), product, new ViewDataDictionary(ViewData){ { "LoadableProduct", true }, { "LoadableProductHidden", true } })
                                }
                                @if (Model.Products.Count > InitiallyLoadedProducts)
                                {
                                    <div class="w-100 text-center">
                                        <button class="button-1 loadable-list__button">
                                            @T("VIU.Plugin.SolrSearch.ResultPage.ShowMore")
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <h5 class="text-center">
                    @T("Search.NoResultsText")                    
                </h5>
            }
        </div>
    </div>
</div>
                
@if (blogResultsEnabled)
{
    @blogResults
}

@await Component.InvokeAsync("Widget", new
{
    widgetZone = PublicWidgetZones.ProductSearchPageAfterResults
})