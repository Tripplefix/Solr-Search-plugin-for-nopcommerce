@model ProductSolrResultModel

@{
    Layout = "_ColumnsTwo";
    
    //solid header
    ViewData.Add(new KeyValuePair<string, object>("IsSolidHeader", true));
    
    //page class
    Html.AppendPageCssClassParts("html-search-page");
    
    //title
    Html.AddTitleParts(T("VIU.Plugin.SolrSearch.PageTitle.SearchWithQ").Text);
    
    const int InitiallyLoadedProducts = 12;
    
    var blogResults = await Component.InvokeAsync("Widget", new {widgetZone = "kontent_search_blog_results", additionalData = Model.q});
    var blogResultsEnabled = !string.IsNullOrEmpty(blogResults.ToHtmlString());
    
    // load prices async
    Html.AppendScriptParts(ResourceLocation.Footer, $"~/Plugins/VIU.Plugin.SolrSearch/Content/JavaScripts/solr-prices-async.js?v2");
    
    if(!string.IsNullOrWhiteSpace(Model.Facets)){
        Html.AppendInlineScriptParts(ResourceLocation.Head, "<meta name=\"robots\" content=\"noindex\" />");
    }
}

@await Component.InvokeAsync("Widget", new
{
    widgetZone = PublicWidgetZones.ProductSearchPageBeforeResults
})

@if (!string.IsNullOrWhiteSpace(Model.q))
{
    <div class="container-fluid mb-5 py-5">
        <div class="row">
            <div class="col-12">
                <div class="text-center">
                    @if (!string.IsNullOrWhiteSpace(Model.q))
                    {
                        <div class="section--title">
                            <h1>@T("VIU.Plugin.SolrSearch.ResultPage.ResultsFor", Model.q)</h1>
                        </div>
                    }
                    <div class="h3">
                        @T("VIU.Plugin.SolrSearch.ResultPage.ProductsWithCount", Model.Products.Count)
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!Model.NoResults && Model.Products.Any())
    {
        <div class="container-fluid my-5">
            <div class="row">
                <div class="col-12">

                    @await Html.PartialAsync("_FacetFilter", Model)

                </div>
            </div>
        </div>
    }

    <div class="container-fluid my-5">
        <div class="row">
            <div class="col-12">
                @if (!Model.NoResults && Model.Products.Any())
                {
                    <div class="search-results my-5">

                        @if (!string.IsNullOrEmpty(Model.Warning))
                        {
                            <div class="warning">
                                @Model.Warning
                            </div>
                        }
                        else
                        {
                            <div class="product-grid" data-prices-async data-prices-async-url="@(Url.Action("PricesJson", "SolrSearch"))">
                                <div class="item-row loadable-list" data-loadable-items-amount="@InitiallyLoadedProducts">
                                    @foreach (var product in Model.Products.Take(InitiallyLoadedProducts))
                                    {
                                        @await Html.PartialAsync("_ProductBox", product, new ViewDataDictionary(ViewData){ { "LoadableProduct", true } })
                                    }
                                    @foreach (var product in Model.Products.Skip(InitiallyLoadedProducts))
                                    {
                                        @await Html.PartialAsync("_ProductBox", product, new ViewDataDictionary(ViewData){ { "LoadableProduct", true }, { "LoadableProductHidden", true } })
                                    }
                                    @if (Model.Products.Count > InitiallyLoadedProducts)
                                    {
                                        <div class="w-100 text-center">
                                            <button class="button-1 loadable-list__button">
                                                @T("VIU.Plugin.SolrSearch.ResultPage.ShowMore")
                                            </button>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <h4 class="text-center">
                        @T("Search.NoResultsText")                    
                    </h4>
                }
                </div>
            </div>
        </div>

    @if (blogResultsEnabled)
    {
        @blogResults
    }
}
else
{
    
    <div class="container-fluid my-5 pt-5">
        <div class="row">
            <div class="col-12">
                <div class="text-center">
                    <div class="notification-box notification-box--warning">
                        <h2>@T("VIU.Plugin.SolrSearch.ResultPage.NoQueryProvided")</h2>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@await Component.InvokeAsync("Widget", new
{
    widgetZone = PublicWidgetZones.ProductSearchPageAfterResults
})