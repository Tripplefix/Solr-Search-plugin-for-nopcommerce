@model VIU.Plugin.SolrSearch.Models.ProductSolrResultModel

@if (Model.ProductFacets.Any())
{
    <script asp-location="Footer">
        var SolrSearch = {
            loading: false,
            filterActive: false,
            toggleFilterText: "@T("IVF.Plugin.SpecificationFilter.ToggleFilter", string.Empty)",
            toggleFilterFilteredText: "@T("IVF.Plugin.SpecificationFilter.ToggleFilterFiltered", Model.Products.Count)",
            
            init: function (){
                let facets = this.loadFacetsFromQuery();
                
                
                $("[id^=facet_] .select__button").removeClass("active");
                $("[id^=option_]").removeClass("selected");
                
                Object.keys(facets).forEach(facet => {
                    $("#facet_" + facet + " .select__button").addClass("active");
                    
                    facets[facet].forEach(option => {
                        $("#facet_" + facet + " #option_" + option).addClass("selected");
                    });
                    
                    this.filterActive = true;
                });
                
                if (this.filterActive){
                    $(".filter__toggle-button").text(this.toggleFilterFilteredText);
                    $(".filter__controls").show();
                }else{
                    $(".filter__toggle-button").text(this.toggleFilterText)
                    $(".filter__controls").hide();
                }
            },
                     
            filter: function (facet, option){

                let facets = this.loadFacetsFromQuery();
                    
                if (Object.keys(facets).length > 0){
                    
                    if (!facets[facet]){
                        facets[facet] = [];           
                    }  
                    
                    if (facets[facet].includes(option)){
                        facets[facet] = facets[facet].filter(e => e !== option);
                        
                        if (facets[facet].length <= 0){
                            delete facets[facet];
                        }
                    }else{
                        facets[facet].push(option);   
                    }
                        
                }else{
                    
                    facets[facet] = [];             
                    facets[facet].push(option);
                    
                }
                
                this.applyFilter(facets);
            },
            
            clearFacet: function (facet){
                let facets = this.loadFacetsFromQuery();
                
                if (Object.keys(facets).length > 0){
                    
                    if (!facets[facet]){
                        facets[facet] = [];           
                    }  
                    
                    delete facets[facet];
                        
                }
                
                this.applyFilter(facets);
            },
            
            loadFacetsFromQuery: function() {
                let facets = {};            
                
                const facetsParam = this.getParameterByName('facets'); 
                
                if (!facetsParam || facetsParam.length <= 0) return facets;
                
                const facetStrings = facetsParam.split(',');
                              
                facetStrings.forEach(function(value) {
                    const facetName = value.split(':')[0];
                    facets[facetName] = value.split(':')[1].split('|');
                });
                
                return facets;
            },
            
            applyFilter: function(facets) {
                @{
                    var q = !string.IsNullOrWhiteSpace(Model.q) ? "?q=" + Uri.EscapeDataString(Model.q) : string.Empty;
                }
                
                const baseUrl = location.protocol + '//' + location.host + location.pathname;
                const q = decodeURI("@q");
                
                if (Object.keys(facets).length <= 0) {
                    window.location.href = baseUrl + q;
                }
                
                let query = (!q ? "?" : "&") + "facets=";
                
                Object.keys(facets).forEach(key => {
                    query += key + ":" + facets[key].join('|') + ",";
                });
                
                query = query.slice(0, -1);
                
                window.location.href = baseUrl + q + query;
            },
            
            getParameterByName: function(name, url = window.location.href) {
                name = name.replace(/[\[\]]/g, '\\$&');
                const regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                    results = regex.exec(url);
                if (!results) return null;
                if (!results[2]) return '';
                return decodeURIComponent(results[2].replace(/\+/g, ' '));
            }
        }
        
        SolrSearch.init();
    </script>

    <div class="container my-5">
        <div class="row">
            <div class="col-12">
                <button class="button-2 button--mobile filter__toggle-button" type="button"
                        data-toggle="collapse" data-target="#collapseFilters"
                        aria-expanded="false" aria-controls="collapseFilters">
                    @T("IVF.Plugin.SpecificationFilter.ToggleFilter", string.Empty)
                </button>

                <div class="filters collapse" id="collapseFilters">
                    <div class="filters__selects">
                        @foreach (var facet in Model.ProductFacets)
                        {
                            <div class="select__container" id="facet_@facet.FacetName">
                                @{
                                    var selectedName = T("VIU.Plugin.SolrSearch.FacetFilter.SelectDefaultValue").Text;
                                }

                                <h6 class="select__title">
                                    @facet.FacetDisplayName
                                </h6>

                                <div class="select">
                                    <div class="select__button">
                                        <span class="select__current">@selectedName</span>
                                        <span class="select__current--number"></span>
                                        <a onclick="event.stopPropagation();SolrSearch.clearFacet('@facet.FacetName')" class="select__clear">
                                            <span class="icon-molicare icon-close"></span>
                                        </a>
                                    </div>

                                    <div class="select__dropdown active">
                                        <div class="select__close">
                                            <h6 class="select__title">@facet.FacetDisplayName</h6>
                                            <span class="icon-molicare icon-close"></span>
                                        </div>
                                        @foreach (var option in facet.FacetValues)
                                        {
                                            var facetDisabled = option.OptionProductCount <= 0;
                                            <div id="option_@option.OptionName"
                                                 @(Html.Raw(!facetDisabled ? $"onclick=\"SolrSearch.filter('{facet.FacetName}', '{option.OptionName}')\"" : ""))
                                                 class="option@(facetDisabled ? " disabled" : "")">
                                                <span class="select__label">
                                                    @option.OptionDisplayName
                                                </span>
                                                <span class="select__count">
                                                    @option.OptionProductCount
                                                </span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="filter__controls" style="display: none">
                        <a style="cursor: pointer;" onclick="location.href = '@(Url.RouteUrl("Search") + "?q=" + Model.q)'" class="filter__reset">
                            <span class="icon-molicare icon-close"></span> @T("Filtering.SpecificationFilter.Remove")
                        </a>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <style type="text/css">
        .filters .option.selected{
            background: #00625c;
            color: #fff;
        }
    </style>
}