@model ProductSolrResultModel

@{
    Layout = "_ColumnsOne";
    
    //solid header
    ViewData.Add(new KeyValuePair<string, object>("IsSolidHeader", true));

    var hasQ = Model.q != string.Empty;

    //title
    Html.AddTitleParts(T(hasQ ? "PageTitle.Search" : "VIU.Plugin.SolrSearch.ResultPage.PageTitleWithoutQ").Text);
    //page class
    Html.AppendPageCssClassParts("html-search-page");
    
    const int InitiallyLoadedProducts = 4;
    
    var blogResults = await Component.InvokeAsync("Widget", new {widgetZone = "kontent_search_blog_results", additionalData = Model.q});
    var blogResultsEnabled = !string.IsNullOrEmpty(blogResults.ToString());
    
    // load prices async
    Html.AppendScriptParts(ResourceLocation.Footer, $"~/Plugins/VIU.Plugin.SolrSearch/Content/JavaScripts/solr-prices-async.js?v3");
}

@if (!hasQ)
{
    <div class="container mt-6">
        <div class="row">
            <div class="col-12">
                <h1 class="color--primary text--center">
                    @T("VIU.Plugin.SolrSearch.ResultPage.Title")
                </h1>
                <p class="text--subtitle text--center">
                    @T("VIU.Plugin.SolrSearch.ResultPage.SubTitle")
                </p>
            </div>
        </div>
    </div>
}

@if (hasQ)
{
    <div class="container my-5">
        <div class="row">
            <div class="col-12 col-lg-6 offset-lg-3">
                <form asp-route="ProductSearch" method="get">
                    <div class="fieldset">
                        <div class="form-fields">
                            <div class="inputs inputs__search">
                                <input asp-for="q" class="search-text"/>
                                <a href="#" class="input__clear">
                                    <span class="icon-molicare icon-close"></span>
                                </a>
                                <button type="submit" class="button-1 inputs-action-button">
                                    <span class="icon-molicare icon-magnify"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@await Component.InvokeAsync("Widget", new
{
    widgetZone = PublicWidgetZones.ProductSearchPageBeforeResults
})

@if (hasQ)
{
    <div class="container my-5">
        <div class="row">
            <div class="col-12">
                <div class="text--center">
                    <div class="section--title">
                        <h3>@T("VIU.Plugin.SolrSearch.ResultPage.ResultsFor", Model.q)</h3>
                    </div>
                    <h4>
                        @T("VIU.Plugin.SolrSearch.ResultPage.ProductsWithCount", Model.Products.Count)
                    </h4>
                </div>
            </div>
        </div>
    </div>
}
        
@await Html.PartialAsync("_FacetFilter", Model)


@if (!Model.NoResults && Model.Products.Any())
{
    <div class="container my-5">
        <div class="row">
            <div class="col-12">
                <div class="search-results">
                    @if (hasQ)
                    {
                        @if (!string.IsNullOrEmpty(Model.Warning))
                        {
                            <div class="warning">
                                @Model.Warning
                            </div>
                        }
                        else
                        {
                            var rnd = new Random();
                            var id = rnd.Next(1000, 9999).ToString();
                    
                            <div class="product-grid" id="@id" data-prices-async data-prices-async-url="@(Url.Action("PricesJson", "SolrSearch"))">
                                <div class="item-grid">
                                    <div class="item-row">
                                        @foreach (var product in Model.Products.Take(4))
                                        {
                                            <div class="item-box">
                                                @await Html.PartialAsync("_ProductBox", product)
                                            </div>
                                        }
                                        @foreach (var product in Model.Products.Skip(4))
                                        {
                                            <div class="item-box">
                                                @await Html.PartialAsync("_ProductBox", product, new ViewDataDictionary(ViewData){ { "HideProduct", true } })
                                            </div>
                                        }
                                    </div>
                                
                                    @if (Model.Products.Count > 4)
                                    {
                                        <div class="item-grid__button">
                                            <div class="item-grid__button-container">
                                                <a href="#" class="button-2" onclick="$('#@id .product__hide-on-desktop').slideDown(); $('#@id .item-grid__button').slideUp();">
                                                    @T("IVF.Plugin.Kontent.Presentation.ProductTeaser.ShowAll")
                                                </a>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="product-grid" data-prices-async data-prices-async-url="@(Url.Action("PricesJson", "SolrSearch"))">
                            <div class="item-grid">
                                <div class="item-row">
                                    @foreach (var product in Model.Products)
                                    {
                                        <div class="item-box">
                                            @await Html.PartialAsync("_ProductBox", product)
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container my-5">
        <div class="row">
            <div class="col-12">
                <h5>
                    @T("Search.NoResultsText")                    
                </h5>
            </div>
        </div>
    </div>
}

@if (blogResultsEnabled)
{
    @blogResults
}

@await Component.InvokeAsync("Widget", new
{
    widgetZone = PublicWidgetZones.ProductSearchPageAfterResults
})